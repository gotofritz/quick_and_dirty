What are state variables in a smart contract?		Variables whose values are permanently stored in contract storage	<pre>contract SimpleStorage {<br>    uint storedData; // State variable<br>    // ...<br>}</pre>											geeky blockchain
What are function in a smart contract?		The executable units of code within a contract	<pre>contract SimpleAuction {<br>    function bid() public payable { // Function<br>        // ...<br>    }<br>}</pre>											geeky blockchain
What can function modifiers in Solidity be used for?		To easily change the behaviour of functions. For example, they can automatically check a condition prior to executing the function	<pre>contract Purchase {<br>    address public seller;<br><br>    modifier onlySeller() { // Modifier<br>        require(<br>            msg.sender == seller,<br>            "Only seller can call this."<br>        );<br>        _;<br>    }<br><br>    function abort() public view onlySeller { // Modifier usage<br>        // ...<br></pre>	Modifiers are inheritable properties of contracts and may be overridden by derived contracts										geeky blockchain
What are Events in Solidity?		Events are convenience interfaces with the EVM logging facilities	<pre>contract SimpleAuction {<br>    event HighestBidIncreased(address bidder, uint amount); // Event<br><br>    function bid() public payable {<br>        // ...<br>        emit HighestBidIncreased(msg.sender, msg.value); // Triggering event<br>    }<br>}											geeky blockchain
What does this smart contract do?	<pre>pragma solidity >0.4.99 <0.6.0;<br><br>contract Coin {<br>    address public minter;<br>    mapping (address => uint) public balances;<br><br>    event Sent(address from, address to, uint amount);<br><br>    constructor() public {<br>        minter = msg.sender;<br>    }<br><br>    function mint(address receiver, uint amount) public {<br>        require(msg.sender == minter);<br>        require(amount < 1e60);<br>        balances[receiver] += amount;<br>    }<br><br>    function send(address receiver, uint amount) public {<br>        require(amount <= balances[msg.sender], "Insufficient balance.");<br>        balances[msg.sender] -= amount;<br>        balances[receiver] += amount;<br>        emit Sent(msg.sender, receiver, amount);<br>    }<br>}</pre>	It's a "homemade" cryptocurrency	<pre>address public minter;</pre>	<i>minter</i> is a publicly accessible variable of type address	<pre>mapping (address => uint) public balances;</pre>	balances is a very basic hash table	<pre>event Sent(address from, address to, uint amount);</pre>	Declares so-called "events" emitted on the blockchain, which can be listened to by clients or other apps)	<pre>function send(address receiver, uint amount) public {<br>        require(amount <= balances[msg.sender], "Insufficient balance.");<br>        balances[msg.sender] -= amount;<br>        balances[receiver] += amount;<br>        emit Sent(msg.sender, receiver, amount);<br>    }</pre>	This sends the event				geeky blockchain
